//--------------------------------------------------------------------------------
// Auto-generated by LiteX (57faa910) on 2023-09-26 20:38:36
//--------------------------------------------------------------------------------
#ifndef __GENERATED_SOC_H
#define __GENERATED_SOC_H
#define CONFIG_CLOCK_FREQUENCY 24000000
#define CONFIG_CPU_HAS_INTERRUPT
#define CONFIG_CPU_RESET_ADDR 0
#define CONFIG_CPU_TYPE_BUS_ERROR
#define CONFIG_CPU_VARIANT_STANDARD
#define CONFIG_CPU_HUMAN_NAME "PicoRV32"
#define CONFIG_CPU_NOP "nop"
#define SPIFLASH_PHY_FREQUENCY 24000000
#define SPIFLASH_MODULE_NAME "W25Q64FV"
#define SPIFLASH_MODULE_TOTAL_SIZE 8388608
#define SPIFLASH_MODULE_PAGE_SIZE 256
#define CONFIG_CSR_DATA_WIDTH 32
#define CONFIG_CSR_ALIGNMENT 32
#define CONFIG_BUS_STANDARD "WISHBONE"
#define CONFIG_BUS_DATA_WIDTH 32
#define CONFIG_BUS_ADDRESS_WIDTH 32
#define CONFIG_BUS_BURSTING 0
#define TIMER0_INTERRUPT 4
#define UART_INTERRUPT 3

#ifndef __ASSEMBLER__
static inline int config_clock_frequency_read(void) {
	return 24000000;
}
static inline int config_cpu_reset_addr_read(void) {
	return 0;
}
static inline const char * config_cpu_human_name_read(void) {
	return "PicoRV32";
}
static inline const char * config_cpu_nop_read(void) {
	return "nop";
}
static inline int spiflash_phy_frequency_read(void) {
	return 24000000;
}
static inline const char * spiflash_module_name_read(void) {
	return "W25Q64FV";
}
static inline int spiflash_module_total_size_read(void) {
	return 8388608;
}
static inline int spiflash_module_page_size_read(void) {
	return 256;
}
static inline int config_csr_data_width_read(void) {
	return 32;
}
static inline int config_csr_alignment_read(void) {
	return 32;
}
static inline const char * config_bus_standard_read(void) {
	return "WISHBONE";
}
static inline int config_bus_data_width_read(void) {
	return 32;
}
static inline int config_bus_address_width_read(void) {
	return 32;
}
static inline int config_bus_bursting_read(void) {
	return 0;
}
static inline int timer0_interrupt_read(void) {
	return 4;
}
static inline int uart_interrupt_read(void) {
	return 3;
}
#endif // !__ASSEMBLER__

#endif
